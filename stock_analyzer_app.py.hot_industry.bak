#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
股票分析系统主入口
集成了run.sh的功能，可以直接通过python stock_analyzer_app.py启动
"""

import os
import sys
import logging
import traceback
from datetime import datetime, timedelta
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
    QTextEdit, QApplication, QMessageBox, QInputDialog, QLabel, QFrame, QLineEdit, 
    QTableWidget, QDateEdit, QSpinBox, QDoubleSpinBox, QComboBox, QHeaderView, QTabWidget,
    QTableWidgetItem, QProgressBar)
from PyQt5.QtCore import Qt, QDate
from PyQt5.QtGui import QFont, QPalette, QColor
from PyQt5.QtCore import Qt
import pandas as pd
import numpy as np
from visual_stock_system import VisualStockSystem
from single_stock_analyzer import SingleStockAnalyzer
import sys
import logging
# 导入行业分析器
from sector_analyzer import SectorAnalyzer

# 设置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='system.log',
    filemode='a'
)
logger = logging.getLogger('StockAnalyzerApp')

# 导入智能推荐系统
try:
    from smart_recommendation_ui import show_recommendation_ui
    from smart_recommendation_system import get_recommendation_system
    HAS_SMART_RECOMMENDATION = True
except ImportError:
    HAS_SMART_RECOMMENDATION = False
    logging.warning("智能推荐系统未找到，相关功能将被禁用")

# 保存进程ID
def save_pid(pid_file='app.pid'):
    """保存进程ID到文件中"""
    try:
        with open(pid_file, 'w') as f:
            f.write(str(os.getpid()))
    except Exception as e:
        logger.error(f"保存PID文件失败: {e}")

class StockAnalyzerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        print("正在初始化股票分析系统...")
        self.token = '0e65a5c636112dc9d9af5ccc93ef06c55987805b9467db0866185a10'
        
        # 初始化日志
        self.logger = logging.getLogger('StockAnalyzerApp')
        
        try:
            self.visual_system = VisualStockSystem(self.token)
            print("成功初始化数据系统")
            self.initUI()
            print("GUI界面已启动，程序准备就绪")
        except Exception as e:
            print(f"系统初始化失败：{str(e)}")
            QMessageBox.critical(self, '错误', f'系统初始化失败：{str(e)}')
            sys.exit(1)
        
    def initUI(self):
        # 设置主窗口
        self.setWindowTitle('可视化股票分析系统')
        self.setGeometry(100, 100, 1000, 800)
        
        # 设置应用字体 - 使用macOS系统字体
        app_font = QFont('PingFang SC', 10)  # macOS上常用的中文字体
        QApplication.setFont(app_font)
        
        # 创建中央部件和布局
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setSpacing(10)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # 创建标题
        title_label = QLabel('可视化股票分析系统')
        title_label.setFont(QFont('PingFang SC', 16, QFont.Bold))  # 修改字体
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # 创建分隔线
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        layout.addWidget(line)
        
        # 创建顶部控制区域
        control_layout = QHBoxLayout()
        control_layout.setSpacing(15)
        
        # 添加分析按钮
        analyze_btn = self.create_styled_button('分析全市场')
        analyze_btn.clicked.connect(self.analyze_stocks)
        control_layout.addWidget(analyze_btn)
        
        # 添加单只股票分析按钮
        single_stock_btn = self.create_styled_button('单只股票分析')
        single_stock_btn.clicked.connect(self.analyze_single_stock)
        control_layout.addWidget(single_stock_btn)
        
        # 添加可视化按钮
        visualize_btn = self.create_styled_button('可视化分析')
        visualize_btn.clicked.connect(self.visualize_stocks)
        control_layout.addWidget(visualize_btn)
        
        # 添加回测按钮
        backtest_btn = self.create_styled_button('策略回测')
        backtest_btn.clicked.connect(self.analyze_backtest)
        control_layout.addWidget(backtest_btn)
        
        # 添加智能推荐功能按钮
        review_btn = self.create_styled_button('智能推荐系统')
        review_btn.clicked.connect(self.show_smart_recommendation)
        control_layout.addWidget(review_btn)

        # 添加体积价格分析按钮
        volume_price_btn = self.create_styled_button('体积价格分析')
        volume_price_btn.clicked.connect(self.analyze_volume_price)
        control_layout.addWidget(volume_price_btn)
        
        # 添加热门行业分析按钮
        hot_industry_btn = self.create_styled_button('热门行业分析')
        hot_industry_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF5722;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #E64A19;
            }
            QPushButton:pressed {
                background-color: #BF360C;
            }
        """)
        hot_industry_btn.clicked.connect(self.analyze_hot_industries)
        control_layout.addWidget(hot_industry_btn)

        control_layout.addStretch()
        layout.addLayout(control_layout)
        
        # 添加结果显示区域
        self.result_text = QTextEdit()
        self.result_text.setReadOnly(True)
        self.result_text.setFont(QFont('PingFang SC', 10))
        self.result_text.setStyleSheet("""
            QTextEdit {
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        layout.addWidget(self.result_text)
        
        # 设置窗口样式
        self.setStyleSheet("""
            QMainWindow {
                background-color: white;
            }
            QLabel {
                color: #333;
            }
        """)
        
        # 显示初始化成功消息
        self.result_text.append("系统初始化完成，可以开始分析股票数据。")

    def create_styled_button(self, text):
        btn = QPushButton(text)
        btn.setFont(QFont('PingFang SC', 10))
        btn.setMinimumSize(120, 35)
        btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #0D47A1;
            }
        """)
        return btn
    
    def analyze_stocks(self):
        try:
            # 获取行业列表
            industries = self.visual_system.get_industry_list()
            if not industries:
                QMessageBox.warning(self, '错误', '获取行业列表失败')
                return

            # 让用户选择行业
            industry, ok = QInputDialog.getItem(
                self,
                '选择行业',
                '请选择要分析的行业：',
                ['全部'] + industries,
                0,
                False
            )

            if not ok:
                return

            self.result_text.clear()
            self.result_text.append(f'正在分析{"全市场" if industry == "全部" else industry}股票...')
            QApplication.processEvents()
            
            # 分析股票
            recommendations = self.visual_system.scan_stocks(industry=None if industry == '全部' else industry)
            
            if not recommendations:
                self.result_text.append('未找到符合条件的股票')
                return
                
            self.result_text.append(f'共分析 {len(recommendations)} 只股票')
            QApplication.processEvents()
            
            # 按照条件排序
            sorted_recommendations = sorted(recommendations, 
                key=lambda x: (
                    1 if x['trend'] == 'uptrend' else 0,
                    abs(x['macd_hist']),
                    x['volume'] / x['volume_ma20'],
                    x['atr']
                ), 
                reverse=True
            )
            
            # 显示前10只股票
            self.display_analysis(sorted_recommendations[:10])
            
                        # 将强烈推荐的股票添加到智能推荐系统
            if HAS_SMART_RECOMMENDATION:
                try:
                    # 获取智能推荐系统实例
                    smart_system = get_recommendation_system()
                    
                    # 过滤出强烈推荐买入的股票
                    strong_recommendations = [r for r in sorted_recommendations 
                                            if r.get('recommendation', '') == '强烈推荐买入' or
                                               r.get('recommendation', '') == '建议买入']
                    
                    # 添加到智能推荐系统
                    from smart_recommendation_system import create_recommendation, StockRecommendation
                    added_to_smart = 0
                    
                    for rec in strong_recommendations[:5]:  # 限制只添加前5个最强推荐
                        # 创建推荐对象
                        stock_code = rec['symbol']
                        stock_name = rec.get('name', rec.get('symbol', '未知'))
                        current_price = rec.get('last_price', rec.get('close', 0))
                        
                        # 计算目标价和止损价
                        target_price = current_price * 1.15  # 15%盈利目标
                        stop_loss = current_price * 0.92    # 8%止损线
                        
                        # 构建推荐理由
                        reason = f"技术分析推荐：{rec.get('recommendation', '建议买入')}。"
                        if rec.get('trend') == 'uptrend':
                            reason += " 处于上升趋势。"
                        if rec.get('volume', 0) > rec.get('volume_ma20', 1):
                            reason += f" 成交量放大{rec.get('volume', 0)/rec.get('volume_ma20', 1):.1f}倍。"
                        
                        # 添加推荐
                        new_recommendation = create_recommendation(
                            stock_code=stock_code,
                            stock_name=stock_name,
                            entry_price=current_price,
                            target_price=target_price,
                            stop_loss=stop_loss,
                            reason=reason,
                            source="股票分析系统",
                            score=85.0,
                            tags=["技术分析", rec.get('trend', 'unknown')]
                        )
                        
                        if smart_system.add_recommendation(new_recommendation):
                            added_to_smart += 1
                    
                    if added_to_smart > 0:
                        self.result_text.append(f'\n已将 {added_to_smart} 只强烈推荐股票添加到智能推荐系统')
                except Exception as e:
                    self.result_text.append(f'\n添加股票到智能推荐系统时出错: {str(e)}')
        
        except Exception as e:
            QMessageBox.warning(self, '错误', f'分析过程中出错：{str(e)}')
    
    def visualize_stocks(self):
        self.result_text.clear()
        self.result_text.append("正在准备可视化分析...")
        # 这里添加可视化分析的代码
        self.result_text.append("可视化分析功能尚未实现。")
    
    def analyze_backtest(self):
        """实现策略回测功能"""
        try:
            from enhanced_backtesting import EnhancedBacktester
            import pandas as pd
            from datetime import datetime, timedelta
            
            self.result_text.clear()
            self.result_text.append("正在准备策略回测...")
            QApplication.processEvents()
            
            # 获取用户输入的股票代码
            stock_code, ok = QInputDialog.getText(
                self, '输入股票代码',
                '请输入要回测的股票代码：\n支持以下格式：\n1. 六位数字代码（如：000001）\n2. 带交易所后缀（如：000001.SZ）',
                QLineEdit.Normal
            )
            
            if not ok or not stock_code:
                self.result_text.append("已取消回测")
                return
                
            # 获取回测参数
            start_date = QInputDialog.getText(
                self, '开始日期',
                '请输入回测开始日期 (YYYY-MM-DD)：',
                QLineEdit.Normal,
                (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')
            )[0]
            
            end_date = QInputDialog.getText(
                self, '结束日期',
                '请输入回测结束日期 (YYYY-MM-DD)：',
                QLineEdit.Normal,
                datetime.now().strftime('%Y-%m-%d')
            )[0]
            
            initial_capital = QInputDialog.getDouble(
                self, '初始资金',
                '请输入初始资金（元）：',
                100000, 10000, 10000000, 2
            )[0]
            
            # 获取策略选择
            strategy_options = ['MACD金叉策略', 'KDJ金叉策略', '双均线策略', '布林带策略', '量价策略']
            strategy, ok = QInputDialog.getItem(
                self, '选择策略',
                '请选择回测策略：',
                strategy_options,
                0,
                False
            )
            
            if not ok:
                self.result_text.append("已取消回测")
                return
                
            self.result_text.append(f"正在对 {stock_code} 进行 {strategy} 回测...")
            self.result_text.append(f"回测区间: {start_date} 至 {end_date}")
            self.result_text.append(f"初始资金: {initial_capital:,.2f} 元")
            QApplication.processEvents()
            
            # 初始化回测器
            backtester = EnhancedBacktester(initial_capital=initial_capital)
            
            # 获取股票数据
            stock_data = self.visual_system.get_stock_data(
                stock_code, 
                start_date=start_date,
                end_date=end_date
            )
            
            if stock_data is None or stock_data.empty:
                self.result_text.append(f"获取股票 {stock_code} 数据失败")
                return
                
            # 执行回测
            self.result_text.append("正在执行回测计算...")
            QApplication.processEvents()
            
            # 根据选择的策略执行回测
            if strategy == 'MACD金叉策略':
                result = backtester.backtest_macd_strategy(stock_data, stock_code)
            elif strategy == 'KDJ金叉策略':
                result = backtester.backtest_kdj_strategy(stock_data, stock_code)
            elif strategy == '双均线策略':
                result = backtester.backtest_ma_strategy(stock_data, stock_code)
            elif strategy == '布林带策略':
                result = backtester.backtest_bollinger_strategy(stock_data, stock_code)
            elif strategy == '量价策略':
                result = backtester.backtest_volume_price_strategy(stock_data, stock_code)
            else:
                result = backtester.backtest_macd_strategy(stock_data, stock_code)  # 默认策略
            
            # 显示回测结果
            self.result_text.clear()
            self.result_text.append(f"===== {stock_code} {strategy} 回测结果 =====\n")
            self.result_text.append(f"初始资金: {initial_capital:,.2f} 元")
            self.result_text.append(f"最终资金: {backtester.current_capital:,.2f} 元")
            self.result_text.append(f"总收益率: {((backtester.current_capital/initial_capital)-1)*100:.2f}%")
            self.result_text.append(f"年化收益率: {backtester.annual_return*100:.2f}%")
            self.result_text.append(f"最大回撤: {backtester.max_drawdown*100:.2f}%")
            self.result_text.append(f"夏普比率: {backtester.sharpe_ratio:.2f}")
            self.result_text.append(f"交易次数: {backtester.trade_count}")
            self.result_text.append(f"胜率: {backtester.win_rate*100:.2f}%")
            self.result_text.append(f"盈亏比: {backtester.profit_ratio:.2f}")
            self.result_text.append(f"平均持仓周期: {backtester.avg_holding_period:.1f} 天")
            
            # 显示交易记录
            if backtester.trades:
                self.result_text.append("\n===== 交易记录 =====")
                for i, trade in enumerate(backtester.trades[-10:], 1):  # 只显示最近10条
                    self.result_text.append(f"\n{i}. {trade.timestamp.strftime('%Y-%m-%d')} - {trade.action.upper()}")
                    self.result_text.append(f"   价格: {trade.price:.2f} 数量: {trade.volume:.0f} 股")
                    if trade.action == 'sell':
                        self.result_text.append(f"   收益: {trade.profit:.2f} 元")
            
            # 保存回测结果
            try:
                with open('backtest_results.json', 'w') as f:
                    import json
                    json.dump({
                        'stock_code': stock_code,
                        'strategy': strategy,
                        'start_date': start_date,
                        'end_date': end_date,
                        'initial_capital': initial_capital,
                        'final_capital': backtester.current_capital,
                        'total_return': ((backtester.current_capital/initial_capital)-1)*100,
                        'annual_return': backtester.annual_return*100,
                        'max_drawdown': backtester.max_drawdown*100,
                        'sharpe_ratio': backtester.sharpe_ratio,
                        'trade_count': backtester.trade_count,
                        'win_rate': backtester.win_rate*100,
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }, f, indent=4)
                self.result_text.append("\n回测结果已保存到 backtest_results.json")
            except Exception as e:
                self.result_text.append(f"\n保存回测结果失败: {str(e)}")
                
        except Exception as e:
            self.show_error_message('回测错误', f'执行回测时出错：{str(e)}')
            self.result_text.clear()
            self.result_text.append(f'回测失败：{str(e)}')
        
    def analyze_single_stock(self):
        """分析单只股票"""
        try:
            # 获取用户输入的股票代码
            stock_code, ok = QInputDialog.getText(
                self, '输入股票代码',
                '请输入股票代码：\n支持以下格式：\n1. 六位数字代码（如：000001）\n2. 带交易所后缀（如：000001.SZ）',
                QLineEdit.Normal
            )
            
            if ok and stock_code:
                # 清空之前的结果
                self.result_text.clear()
                self.result_text.append(f'正在分析股票 {stock_code} ...')
                QApplication.processEvents()
                
                # 获取分析结果
                analyzer = SingleStockAnalyzer(self.token)
                result = analyzer.get_detailed_analysis(stock_code)
                
                if result['status'] == 'success':
                    data = result['data']
                    
                    # 确保所有必要的数据结构存在，避免KeyError
                    if 'trend_analysis' not in data:
                        data['trend_analysis'] = {'trend': '未知', 'strength': 0, 'rsi_value': 0}
                    if 'volume_analysis' not in data:
                        data['volume_analysis'] = {'status': '未知', 'ratio': 0}
                    if 'technical_indicators' not in data:
                        data['technical_indicators'] = {'macd': 0, 'macd_signal': 0, 'macd_hist': 0}
                    if 'trading_advice' not in data:
                        data['trading_advice'] = '数据不足，无法提供交易建议'
                    
                    # 格式化输出分析结果
                    output = f"""分析结果：
股票代码：{data.get('symbol', stock_code)}
股票名称：{data.get('name', '未知')}
最新价格：{data.get('last_price', 0):.2f}
{data.get('price_explanation', '')}

趋势分析：
- 趋势：{data['trend_analysis'].get('trend', '未知')}
- 强度：{data['trend_analysis'].get('strength', 0):.2f}
{data['trend_analysis'].get('strength_explanation', '')}
- RSI：{data['trend_analysis'].get('rsi_value', 0):.2f}
{data['trend_analysis'].get('rsi_explanation', '')}

量价分析：
- 状态：{data['volume_analysis'].get('status', '未知')}
- 量比：{data['volume_analysis'].get('ratio', 0):.2f}
{data['volume_analysis'].get('volume_explanation', '')}

技术指标：
- MACD：{data['technical_indicators'].get('macd', 0):.3f}
- MACD信号线：{data['technical_indicators'].get('macd_signal', 0):.3f}
- MACD柱状：{data['technical_indicators'].get('macd_hist', 0):.3f}
{data['technical_indicators'].get('macd_explanation', '')}
- KDJ指标：
  K值：{data['technical_indicators'].get('k', 0):.2f}
  D值：{data['technical_indicators'].get('d', 0):.2f}
  J值：{data['technical_indicators'].get('j', 0):.2f}
{data['technical_indicators'].get('kdj_explanation', '')}

市场分析：
- 波动率：{data.get('market_analysis', {}).get('volatility', 0):.2f}
{data.get('market_analysis', {}).get('volatility_explanation', '')}
- 周期共振：{data.get('market_analysis', {}).get('cycle_resonance', 0):.2f}
{data.get('market_analysis', {}).get('resonance_explanation', '')}

价格区间分析：
- 支撑位：{data.get('trading_ranges', {}).get('support', 0):.2f}
- 压力位：{data.get('trading_ranges', {}).get('resistance', 0):.2f}

交易区间建议：
买入区间：{data.get('trading_ranges', {}).get('buy_range', {}).get('low', 0):.2f} - {data.get('trading_ranges', {}).get('buy_range', {}).get('high', 0):.2f}
卖出区间：{data.get('trading_ranges', {}).get('sell_range', {}).get('low', 0):.2f} - {data.get('trading_ranges', {}).get('sell_range', {}).get('high', 0):.2f}
{data.get('trading_ranges', {}).get('explanation', '')}

交易建议：
{data.get('trading_advice', '数据不足，无法提供交易建议')}"""
                    
                    self.result_text.clear()
                    self.result_text.append(output)
                else:
                    self.show_error_message('分析失败', result.get('message', '未知错误'))
                    self.result_text.clear()
                    self.result_text.append(f'分析失败：{result.get("message", "未知错误")}')
        
        except Exception as e:
            self.show_error_message('系统错误', f'发生未知错误：{str(e)}')
            self.result_text.clear()
            self.result_text.append(f'系统错误：{str(e)}')
    
    def show_error_message(self, title, message):
        """显示错误消息对话框"""
        error_box = QMessageBox()
        error_box.setIcon(QMessageBox.Critical)
        error_box.setWindowTitle(title)
        error_box.setText(message)
        error_box.setStandardButtons(QMessageBox.Ok)
        error_box.exec_()
        
    def show_smart_recommendation(self):
        """显示智能推荐系统"""
        try:
            print("正在启动智能推荐系统...")
            # 添加一个调试日志消息到控制台
            self.result_text.clear()
            self.result_text.append("正在启动智能推荐系统...")
            QApplication.processEvents()  # 确保UI更新
            
            # 打开智能推荐系统界面
            from smart_recommendation_ui import show_recommendation_ui
            self.recommendation_window = show_recommendation_ui()
            self.recommendation_window.raise_()
            self.recommendation_window.activateWindow()
            
            print("智能推荐系统启动完成")
        except Exception as e:
            print(f"智能推荐系统启动失败: {str(e)}")
            import traceback
            traceback.print_exc()
            self.show_error_message('错误', f'启动智能推荐系统时出错：{str(e)}')
            self.result_text.clear()
            self.result_text.append(f'加载失败：{str(e)}')
    
    def display_analysis(self, recommendations):
        self.result_text.clear()
        self.result_text.append('=== 市场分析报告 ===\n')
        self.result_text.append(f'分析时间：{pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
        
        self.result_text.append('最具投资价值的股票：')
        for stock in recommendations:
            stock_name = self.visual_system.get_stock_name(stock['symbol'])
            self.result_text.append(f"\n股票代码：{stock['symbol']} {stock_name}")
            self.result_text.append(f"当前趋势：{stock['trend']}")
            self.result_text.append(f"收盘价：{stock['close']:.2f}")
            self.result_text.append(f"成交量/20日均量：{stock['volume']/stock['volume_ma20']:.2f}")
            self.result_text.append(f"MACD柱状图：{stock['macd_hist']:.4f}")
            self.result_text.append(f"ATR：{stock['atr']:.4f}")
            self.result_text.append(f"建议：{stock.get('recommendation', '观望')}")
            self.result_text.append('-' * 30)

    def format_text_output(self, text):
        return f"<span style='color: #333; font-size: 10pt;'>{text}</span>"

    def analyze_volume_price(self):
        """执行体积价格分析"""
        try:
            # 获取用户输入的股票代码
            stock_code, ok = QInputDialog.getText(
                self,
                '输入股票代码',
                '请输入要分析的股票代码：',
                QLineEdit.Normal
            )
            
            if not ok or not stock_code:
                return
                
            self.result_text.clear()
            self.result_text.append(f'正在分析股票{stock_code}的量价关系...')
            QApplication.processEvents()
            
            # 获取股票数据
            df = self.visual_system.get_stock_data(stock_code)
            if df is None or df.empty:
                self.show_error_message('错误', f'获取股票{stock_code}数据失败')
                return
                
            # 执行量价分析
            df = self.visual_system.analyze_volume_price(df)
            if df is None:
                self.show_error_message('错误', '量价分析失败')
                return
                
            # 生成分析报告
            report = self._generate_volume_price_report(df)
            self.result_text.clear()
            self.result_text.append(report)
            
        except Exception as e:
            self.show_error_message('错误', f'体积价格分析失败：{str(e)}')
            
    def _generate_volume_price_report(self, df):
        """生成量价分析报告"""
        try:
            last_row = df.iloc[-1]
            
            # 格式化分析结果
            report = "量价分析报告\n" + "-" * 50 + "\n\n"
            
            # 1. 成交量分析
            volume_ratio = last_row['Volume_Ratio']
            report += f"成交量分析：\n"
            report += f"• 当前成交量是20日均量的 {volume_ratio:.2f} 倍\n"
            report += f"• 成交量状态：{'放量' if volume_ratio > 1.2 else '缩量' if volume_ratio < 0.8 else '平稳'}\n\n"
            
            # 2. 趋势分析
            trend_strength = last_row['Trend_Strength']
            trend_confidence = last_row['Trend_Confidence']
            report += f"趋势分析：\n"
            report += f"• 趋势强度：{trend_strength:.2f}\n"
            report += f"• 趋势可信度：{trend_confidence:.2%}\n"
            report += f"• 趋势状态：{'强势上涨' if trend_strength > 0.5 else '强势下跌' if trend_strength < -0.5 else '震荡'}\n\n"
            
            # 3. 支撑与压力
            report += f"支撑与压力：\n"
            report += f"• 上方压力位：{last_row['Upper_Line']:.2f}\n"
            report += f"• 下方支撑位：{last_row['Lower_Line']:.2f}\n"
            report += f"• 通道宽度：{last_row['Channel_Width']:.2f}%\n\n"
            
            # 4. 波动性分析
            report += f"波动性分析：\n"
            report += f"• ATR：{last_row['ATR']:.2f}\n"
            report += f"• 波动率：{last_row['Volatility']:.2f}%\n\n"
            
            # 5. 综合建议
            score = last_row['Volume_Price_Score']
            report += f"综合建议：\n"
            if score > 1.5:
                report += "• 市场活跃度高，可考虑积极参与\n"
            elif score < 0.5:
                report += "• 市场活跃度低，建议谨慎观望\n"
            else:
                report += "• 市场活跃度一般，建议择机参与\n"
                
            return report
            
        except Exception as e:
            return f"生成分析报告时出错：{str(e)}"

    def analyze_hot_industries(self):
        """热门行业分析和预测功能"""
        try:
            self.result_text.clear()
            self.result_text.append("正在分析热门行业数据，请稍候...")
            QApplication.processEvents()  # 更新UI
            
            # 初始化行业分析器
            sector_analyzer = SectorAnalyzer(top_n=15)  # 分析前15个热门行业
            
            # 获取热门行业分析结果
            self.result_text.append("正在获取行业列表及计算热度...")
            QApplication.processEvents()  # 更新UI
            result = sector_analyzer.analyze_hot_sectors()
            
            if result['status'] != 'success':
                self.show_error_message('分析失败', f"热门行业分析失败: {result['message']}")
                return
                
            hot_sectors = result['data']['hot_sectors']
            
            # 创建市场信息字典，使用默认值
            market_info = {
                'market_sentiment': 0,
                'north_flow': result['data'].get('north_flow', 0),
                'volatility': 0,
                'shanghai_change_pct': 0,
                'shenzhen_change_pct': 0,
                'market_avg_change': 0
            }
            
            # 生成热门行业分析报告
            self.result_text.append("\n===== 热门行业分析报告 =====")
            self.result_text.append(f"分析时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            self.result_text.append(f"市场情绪指数: {market_info.get('market_sentiment', 0):.2f}")
            self.result_text.append(f"北向资金流入(亿元): {market_info.get('north_flow', 0):.2f}")
            self.result_text.append(f"市场波动率: {market_info.get('volatility', 0):.2f}%")
            
            # 显示热门行业排名
            self.result_text.append("\n【热门行业排名】")
            for i, sector in enumerate(hot_sectors[:10]):  # 显示前10个行业
                self.result_text.append(f"{i+1}. {sector['name']} - 热度: {sector['hot_score']:.2f} - "
                                       f"涨跌幅: {sector['change_pct']:.2f}% - 成交量: {sector['volume']:.2f}亿元")
                # 添加分析理由
                if 'analysis_reason' in sector:
                    self.result_text.append(f"   分析: {sector['analysis_reason']}")
            
            # 行业分类分析 - 新增功能
            self.result_text.append("\n【行业分类表现对比】")
            self.result_text.append("按照不同行业分类标准的表现情况：")
            
            # 按照行业主题分组统计
            sector_categories = {
                "科技类": ["计算机", "通信", "电子", "半导体", "智能汽车", "人工智能", "云计算"],
                "消费类": ["食品饮料", "家电", "纺织服装", "商贸零售", "旅游酒店", "医药", "医疗器械"],
                "金融类": ["银行", "证券", "保险", "多元金融"],
                "周期类": ["有色金属", "钢铁", "煤炭", "石油", "化工", "建筑", "房地产"],
                "其他类": ["公用事业", "交通运输", "国防军工", "农林牧渔"]
            }
            
            # 计算各大类行业的平均表现
            category_perf = {}
            for category, sectors_list in sector_categories.items():
                matched_sectors = [s for s in hot_sectors if any(sector in s['name'] for sector in sectors_list)]
                if matched_sectors:
                    avg_change = sum(s['change_pct'] for s in matched_sectors) / len(matched_sectors)
                    avg_score = sum(s['hot_score'] for s in matched_sectors) / len(matched_sectors)
                    top_sector = max(matched_sectors, key=lambda x: x['hot_score'])
                    category_perf[category] = {
                        'avg_change': avg_change,
                        'avg_score': avg_score,
                        'top_sector': top_sector['name'],
                        'count': len(matched_sectors)
                    }
            
            # 显示分类表现
            for category, perf in sorted(category_perf.items(), key=lambda x: x[1]['avg_score'], reverse=True):
                self.result_text.append(f"- {category}:")
                self.result_text.append(f"   平均涨跌幅: {perf['avg_change']:.2f}% | 平均热度: {perf['avg_score']:.2f}")
                self.result_text.append(f"   热门代表: {perf['top_sector']} | 纳入行业数: {perf['count']}")
            
            # 行业趋势对比 - 新增功能
            self.result_text.append("\n【行业趋势对比】")
            
            # 获取大盘趋势数据(可选，如果有接口的话)
            try:
                # 尝试获取一些大盘数据来对比行业趋势
                # 这里只是示例，具体代码需要根据可用API修改
                market_trend = {
                    'shanghai_pct': market_info.get('shanghai_change_pct', 0),
                    'shenzhen_pct': market_info.get('shenzhen_change_pct', 0),
                    'avg_market_pct': market_info.get('market_avg_change', 0)
                }
                
                # 对比行业与大盘表现
                outperform_sectors = [s for s in hot_sectors[:15] if s['change_pct'] > market_trend['avg_market_pct']]
                outperform_pct = len(outperform_sectors) / min(15, len(hot_sectors)) * 100
                
                self.result_text.append(f"大盘表现: 沪指涨跌 {market_trend['shanghai_pct']:.2f}%, 深指涨跌 {market_trend['shenzhen_pct']:.2f}%")
                self.result_text.append(f"行业超越大盘比例: {outperform_pct:.1f}%")
                
                if outperform_pct > 70:
                    self.result_text.append("市场特征: 行业普遍强于大盘，呈现普涨格局")
                elif outperform_pct < 30:
                    self.result_text.append("市场特征: 行业普遍弱于大盘，呈现普跌格局")
                else:
                    self.result_text.append("市场特征: 行业表现分化，结构性行情明显")
            except Exception as e:
                self.logger.warning(f"获取行业趋势对比数据失败: {str(e)}")
            
            # 获取行业预测结果
            self.result_text.append("\n正在预测未来行业走势...")
            QApplication.processEvents()  # 更新UI
            prediction_result = sector_analyzer.predict_next_hot_sectors()
            
            if prediction_result['status'] == 'success':
                predictions = prediction_result['data']['predicted_sectors']
                
                # 显示预测结果
                self.result_text.append("\n【行业走势预测】")
                self.result_text.append(f"预测周期: {prediction_result['data']['prediction_period']}")
                
                for i, pred in enumerate(predictions[:5]):  # 显示前5个预测
                    self.result_text.append(f"{i+1}. {pred['name']} - 预测评分: {pred['prediction_score']:.2f} - "
                                          f"预测涨跌: {pred['predicted_change_pct']:.2f}% - 置信度: {pred['confidence']:.2f}%")
                    if 'reason' in pred:
                        self.result_text.append(f"   理由: {pred['reason']}")
                
                # 行业轮动分析
                self.result_text.append("\n【行业轮动分析】")
                if 'rotation_analysis' in prediction_result['data']:
                    rotation = prediction_result['data']['rotation_analysis']
                    self.result_text.append(f"当前轮动阶段: {rotation['current_stage']}")
                    self.result_text.append(f"轮动方向: {rotation['rotation_direction']}")
                    
                    if 'next_sectors' in rotation:
                        self.result_text.append("可能的下一轮行业:")
                        for sector in rotation['next_sectors'][:3]:
                            self.result_text.append(f"- {sector}")
                            
                # 行业景气度分析 - 新增功能
                self.result_text.append("\n【行业景气度评估】")
                
                # 计算行业景气度
                prosperity_data = self._calculate_sector_prosperity(hot_sectors[:15], predictions[:10])
                
                # 显示景气度结果
                prosperity_data.sort(key=lambda x: x['prosperity_score'], reverse=True)
                for i, item in enumerate(prosperity_data[:5]):
                    self.result_text.append(f"{i+1}. {item['name']} - 景气度: {item['prosperity_score']:.1f}")
                    self.result_text.append(f"   当前热度: {item['current_heat']:.1f} | 预期变化: {item['change_trend']}")
            else:
                self.result_text.append(f"\n预测分析失败: {prediction_result['message']}")
            
            # 生成投资建议
            self.result_text.append("\n【投资建议】")
            self.result_text.append("根据行业分析和预测，建议关注以下方向:")
            
            # 提取短期和中期机会
            short_term = [s for s in hot_sectors[:5] if s['hot_score'] > 50]
            mid_term = [p for p in (predictions[:5] if 'predicted_sectors' in prediction_result['data'] else []) 
                         if 'prediction_score' in p and p['prediction_score'] > 50]
            
            if short_term:
                self.result_text.append("短期关注:")
                for s in short_term:
                    self.result_text.append(f"- {s['name']}: {s.get('analysis_reason', '热度高')}")
            
            if mid_term:
                self.result_text.append("中期布局:")
                for m in mid_term:
                    self.result_text.append(f"- {m['name']}: {m.get('reason', '预期向好')}")
            
            # 强调风险提示
            self.result_text.append("\n⚠️ 风险提示: 行业分析仅供参考，投资决策需结合多方面因素，注意控制风险。")
            
        except Exception as e:
            import traceback
            self.logger.error(f"热门行业分析出错: {str(e)}")
            self.logger.error(traceback.format_exc())
            self.show_error_message('分析错误', f"热门行业分析过程中出错: {str(e)}")
            self.result_text.append(f"分析发生错误: {str(e)}")
    
    def _calculate_sector_prosperity(self, hot_sectors, predictions):
        """计算行业景气度
        
        Args:
            hot_sectors: 热门行业列表
            predictions: 预测行业列表
            
        Returns:
            行业景气度数据列表
        """
        # 创建行业名称到数据的映射
        sector_map = {s['name']: s for s in hot_sectors}
        prediction_map = {p['name']: p for p in predictions}
        
        prosperity_data = []
        
        # 对每个热门行业计算景气度
        for sector in hot_sectors:
            name = sector['name']
            
            # 基本热度 (0-100)
            current_heat = min(100, max(0, sector['hot_score']))
            
            # 预期趋势
            prediction = prediction_map.get(name)
            if prediction:
                predicted_change = prediction.get('predicted_change_pct', 0)
                predicted_score = prediction.get('prediction_score', 50)
                confidence = prediction.get('confidence', 0.5)
                
                # 计算趋势分数 (-50 到 50)
                trend_score = predicted_change * confidence / 100 * 25
                
                # 确定趋势方向
                if trend_score > 10:
                    change_trend = "持续向好 ↑↑"
                elif trend_score > 3:
                    change_trend = "小幅向好 ↑"
                elif trend_score < -10:
                    change_trend = "持续下行 ↓↓"
                elif trend_score < -3:
                    change_trend = "小幅下行 ↓"
                else:
                    change_trend = "相对稳定 →"
            else:
                # 如果没有预测数据，默认为中性
                trend_score = 0
                change_trend = "数据不足 -"
            
            # 最终景气度分数 (0-100)
            prosperity_score = current_heat * 0.7 + (50 + trend_score) * 0.3
            
            prosperity_data.append({
                'name': name,
                'current_heat': current_heat,
                'trend_score': trend_score,
                'change_trend': change_trend,
                'prosperity_score': prosperity_score
            })
        
        return prosperity_data

def main():
    """主函数"""
    try:
        # 保存进程ID
        save_pid()

        # 初始化QApplication
        app = QApplication(sys.argv)
        
        # 创建并显示股票分析应用
        analyzer_app = StockAnalyzerApp()
        analyzer_app.show()
        
        # 运行应用
        return app.exec_()
    except Exception as e:
        print(f"启动应用出错: {str(e)}")
        logging.error(f"启动应用出错: {str(e)}", exc_info=True)
        return 1

if __name__ == "__main__":
    sys.exit(main())